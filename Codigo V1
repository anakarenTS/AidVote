// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// Sistema de votaciones para destinar fondos ayuda humanitaria
    //Registrar iniciativas a votar (nombre, causa, address)
    //La Oficina de la ONU para la Coordinación de Asuntos Humanitarios es dueño del contrato y tiene que ser el único que pueda dar derecho al voto a los votantes
    //Permitir que los votantes autorizados voten por una sola iniciativa
    //La votación debe terminar después de un tiempo determinado, cuando se alcance el número máximo de votos u otra condición
    //Una vez finalizada la votación se debe poder ver al ganador y mostrar la dirección del contrato inteligente
    //Cuando cierre la votación se distribuya el monto de donaciones de acuerdo al resultado de votaciones

    //Oficina de la ONU para la Coordinación de Asuntos Humanitarios - Owner - 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4

    /* ONGs propuestas para la votación: FM4, AP, FMCN, FMED
    FM4 Paso Libre - Personas refugiadas y migración - 0xdD870fA1b7C4700F2BD7f44238821C26f7392148
    Alternativas pacíficas AP - Violecia a la mujer - 0x583031D1113aD414F02576BD6afaBfb302140225
    Fondo Mexicano para la Conservación de la Naturaleza FMCN - proyectos estratégicos para conservar el patrimonio natural de México - 0x4B0897b0513fdC7C541B6d9D7E929C4e5364D2dB
    Fondo Mexicano para la Educación y el Desarrollo FMED - Educación - 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C

    Contract input: [FM4, AP, FMCN, FMED]
    */


    
contract Aidvote {

    struct Votante {
        uint peso; 
        bool votoemitido;  
        uint voto;  
    }

    struct Propuesta {
        string nombre;   
        uint Numvotos; 
        address payable cuenta;
    }

    uint256 public voteStart;
    uint256 public votingTime;

    address public delegado;


    mapping(address => Votante) public votantes;

    Propuesta[] public propuestas;

    uint256 _totalDonaciones = 1000 ether;
    mapping(address => uint256) donaciones;

    bool ended;


    constructor(string[] memory propuestaNombres, address payable[] memory propuestaCuentas) {
        delegado = msg.sender;
        votantes[delegado].peso = 1;

  
        for (uint i = 0; i < propuestaNombres.length; i++) {

            propuestas.push(Propuesta({
                nombre: propuestaNombres[i],
                cuenta: propuestaCuentas[i],
                Numvotos: 0
            }));
        }
         donaciones [address(this)] = _totalDonaciones;
    }

    function DarDerechoAVoto(address votante) external {

        require(
            msg.sender == delegado,
            "Solo el delegado pueda dar el derecho al voto"
        );
        require(
            !votantes[votante].votoemitido,
            "El votante ya emitio su voto."
        );
        require(votantes[votante].peso == 0);
        votantes[votante].peso = 1;
    }

  
    function voto(uint propuesta) external {

        uint _votingTime; {
        voteStart = block.timestamp;
        votingTime = _votingTime;
    }
        Votante storage sender = votantes[msg.sender];
        require(sender.peso != 0, "No tiene derecho a votar");
        require(!sender.votoemitido, "Voto Emitido.");
        require(block.timestamp <= (voteStart + votingTime));
        sender.votoemitido = true;
        sender.voto = propuesta;

        propuestas[propuesta].Numvotos += sender.peso;
    }

    function propuestaGanadora() public view
            returns (uint propuestaGanadora_)
    {
        uint ganadoraNumVotos = 0;
        for (uint p = 0; p < propuestas.length; p++) {
            if (propuestas[p].Numvotos > ganadoraNumVotos) {
                ganadoraNumVotos = propuestas[p].Numvotos;
                propuestaGanadora_ = p;
            }
        }
    }

    function nombreGanadora() external view
            returns (string memory nombreGanadora_, address cuentaGanadora_)
    {
        nombreGanadora_ = propuestas[propuestaGanadora()].nombre;
        cuentaGanadora_ = propuestas[propuestaGanadora()].cuenta;

    }

    function votingEnd() external {
        
        require(block.timestamp >= (voteStart + votingTime)); 
        require(!ended);

        ended = true;

function transfer (address payable cuentaGanadora_) external payable returns (bool success){
        require(donaciones[delegado] <= _totalDonaciones, "Saldo insuficiente");
        donaciones[delegado] -= _totalDonaciones; 
        donaciones[cuentaGanadora_] += _totalDonaciones; 
        emit Transfer (delegado, cuentaGanadora_, _totalDonaciones);
        return true;

    }

    }
